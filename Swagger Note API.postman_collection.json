{
	"info": {
		"_postman_id": "e69f050e-2684-4eba-a405-4c468f68a1a8",
		"name": "Swagger Note API",
		"description": "StartFragment\n\n## Notes API Documentation\n\nThis API allows you to manage notes and organize them according to different categories.\n\nStartFragment\n\n```\nBase URL: practice.expandtesting.com/notes/api \n\n ```\n\nEndFragmentStartFragment\n\nEndFragmentStartFragment\n\n## Features\n\n- Create notes with title and content.\n- Categorize notes into different categories.\n- Update and delete notes.\n- Search notes by title or category.\n    \n\nThis API is also utilized as a backend for the [Notes App available here]().\n\nEndFragment\n\nStartFragment\n\n## API Authorization Guide\n\nTo use this API, you must first have a valid account on the system and know your email and password. Once you have that information:\n\nLog in to the API using the **login endpoint**. This will provide you with an authentication token that you can use to access the protected resources.\n\nKeep the token safe, as you will need it for subsequent requests.\n\nTo authorize your requests, click the \"**Authorize**\" button on the top right corner of the Swagger UI interface. A dialog box will appear asking you to enter the authentication token.  \nEnter the token you obtained from the login endpoint and click \"**Authorize**\".\n\nYou are now authorized to use all the protected API endpoints.\n\nIf you need help using this API, check out our **video guide and demo**, which are available [here]()\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28982036"
	},
	"item": [
		{
			"name": "Check health",
			"item": [
				{
					"name": "check health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"pm.test(\"Response body exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Notes API is Running'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Notes API is Running\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiEndpoint}}/health-check",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"health-check"
							]
						},
						"description": "Check Health (GET): This is a positive scenerio where a user tries to check the status of API whether it is up and running or not."
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "register with invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'A valid email address is required'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"A valid email address is required\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"123@@gmail@com\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with email id that is invalid.\n\nHere, i generate email through Pre-request script and stored it on environment variable named 'email'. So, email will be generated before sending POST request."
					},
					"response": []
				},
				{
					"name": "register with weak password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Password must be between 6 and 30 characters'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Password must be between 6 and 30 characters\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with password that is below 6 character."
					},
					"response": []
				},
				{
					"name": "register with invalid api endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test(\"Header Content-Type is text/html\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/html; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register12345",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register12345"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with incorrect/invalid API endpoint."
					},
					"response": []
				},
				{
					"name": "register with GET request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Not Found'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with GET request instead of POST."
					},
					"response": []
				},
				{
					"name": "register with empty payload data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Not Found'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with empty payload body."
					},
					"response": []
				},
				{
					"name": "register correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'User account created successfully'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"User account created successfully\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have name 'Wicked man'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.name).to.eql(\"Wicked Man\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have email 'dizaster24680@gmail.com'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.email).to.eql(\"dizaster24680@gmail.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a positive scenerio where a user tries to register account with all valid details."
					},
					"response": []
				},
				{
					"name": "register with already registered email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(409);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'An account already exists with the same email address'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"An account already exists with the same email address\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Save the email to an environment variable named 'email' before sending the request\r",
									"pm.environment.set('email', \"dizaster24680@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wicked Man\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/register",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Register (POST): This is a negative scenerio where a user tries to register account with alerady registered email address."
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "login with unregistered email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Removed redundant tests and fixed the error",
									"pm.test(\"Status code is 401\", function(){",
									"    pm.expect(pm.response.code).to.be.eql(401);",
									"})",
									"",
									"pm.test(\"Response time is less than 900ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(900);",
									"})",
									"",
									"pm.test('Response body is in JSON', function(){",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"Response body have 'Incorrect email address or password'\", function () {",
									"    let responseBody = pm.response.json();",
									"    pm.expect(responseBody.message).to.eql(\"Incorrect email address or password\")",
									"});",
									"",
									"pm.test(\"Header Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email and save on random-email env variable\r",
									"let randomEmail = \"user\" + Math.random().toString().substr(2, 5) + \"@gmail.com\";\r",
									"pm.environment.set(\"random-email\", randomEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{random-email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/login",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login (POST): This is a negative scenerio where a user tries to login with email that is not registered yet.\n\nHere, i generate random email with inbuilt Postman keyword $randomEmail through Pre-request script and stored it on environment variable named 'random-email'. So, random-email will be generated before sending POST request.\n\nAlternative method, you can directly pass or stored unregistered email on variable and use it without randomly generating it."
					},
					"response": []
				},
				{
					"name": "login with wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Incorrect email address or password'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Incorrect email address or password\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"InCorrectPassword\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/login",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login (POST): This is a negative scenerio where a user tries to login with incorrect password."
					},
					"response": []
				},
				{
					"name": "login correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"})\r",
									"\r",
									"pm.test('Resonse body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'login successful'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Login successful\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Login have cookie\", function () {\r",
									"    pm.expect(Object.keys(pm.cookies.toObject()).length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// store dynamic token value on environment variable with name 'tokenID'\r",
									"const responseData = pm.response.json();\r",
									"console.log(responseData.data.id)\r",
									"pm.environment.set('token', responseData.data.token)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/login",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login (POST): This is a positive scenerio where a user tries to login with correct credentials.\n\nOnce the user login successfully, we get 'token' as a response on response body imcluding other details. This token is generated dynamically from server side so once the user logouts and log back in the token changes.\n\nTo tackle this scenario i wrote assertion on test scripts which stores dynamically generated token on environment variable name 'tokenID'. Now evertime user logsout and login back the newly generated token is stored on variable.\n\nFrom swagger documentation, the token name is 'x-auth-token'. To use this token on other request just pass this token on 'authorization' section of main folder on collection where set token type to 'API KEY', key is 'Token value itself'. This token goes with request header."
					},
					"response": []
				}
			]
		},
		{
			"name": "GET user profile",
			"item": [
				{
					"name": "retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'profile successful'\", function () {\r",
									"    const responseBody = pm.response.json()\r",
									"    pm.expect(responseBody.message).to.eql(\"Profile successful\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have name 'Wicked man'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.name).to.eql(\"Wicked Man\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have email 'dizaster24680@gmail.com'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.email).to.eql(\"dizaster24680@gmail.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "{{tokenType}}",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/users/profile",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"profile"
							]
						},
						"description": "Fetch User Profile (GET) This is a positive scenerio where a user tries to fetch profile information like \\[email, name, id\\] after successful login."
					},
					"response": []
				}
			]
		},
		{
			"name": "Update user profile",
			"item": [
				{
					"name": "update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Profile updated successful'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Profile updated successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have name 'Prabesh'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.name).to.eql(\"Prabesh\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have phone '9849934429'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.phone).to.eql(\"9849934429\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have company 'IT Solutions'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.company).to.eql(\"It Solutions\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"phone\": \"{{contact}}\",\r\n    \"company\": \"{{company}}\"\r\n  }\r\n\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/profile",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"profile"
							]
						},
						"description": "Update user profile (PATCH) This is a positive scenerio where a user tries to apply partial modifications to the profile.\n\nIn this case 'name' is mandatory whereas 'phone number' and 'company name' are optional."
					},
					"response": []
				}
			]
		},
		{
			"name": "Change password",
			"item": [
				{
					"name": "change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response message have 'The password was successfully updated'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"The password was successfully updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{password}}\",\r\n    \"newPassword\": \"{{newPass}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/change-password",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"change-password"
							]
						},
						"description": "Change password (POST) This is a positive scenerio where a user tries to change the current password."
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"})\r",
									"\r",
									"pm.test(\"Response message have 'User has been successfully logged out'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"User has been successfully logged out\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiEndpoint}}/users/logout",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"logout"
							]
						},
						"description": "Logout (DEL) This is a positive scenerio where a user tries to log out of current session."
					},
					"response": []
				}
			]
		},
		{
			"name": "Login with new password",
			"item": [
				{
					"name": "login via. old password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Incorrect email address or password'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Incorrect email address or password\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/login",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login with old password (POST) This is a negative scenerio where a user tries to log in with old password."
					},
					"response": []
				},
				{
					"name": "login via. new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'login successful'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Login successful\")\r",
									"});\r",
									"\r",
									"pm.test(\"Data property exist and is not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Login have cookie\", function () {\r",
									"    pm.expect(Object.keys(pm.cookies.toObject()).length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// store dynamic token value on environment variable with name 'tokenID'\r",
									"const responseData = pm.response.json();\r",
									"console.log(responseData.data.id)\r",
									"pm.environment.set('token', responseData.data.token)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{newPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/login",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login with new password (POST) This is a positive scenerio where a user tries to log in with new password."
					},
					"response": []
				}
			]
		},
		{
			"name": "Create note",
			"item": [
				{
					"name": "create note without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'No authentication token specified in x-auth-token header'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"No authentication token specified in x-auth-token header\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response header have content-type\", function(){\r",
									"    pm.response.to.have.header(\"content-type\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{noteName}}\",\r\n    \"description\": \"{{noteDescription}}\",\r\n    \"category\": \"{{noteCategory}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/notes",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Create note without auth (POST) This is a negative scenerio where a user tries to create note without authentication."
					},
					"response": []
				},
				{
					"name": "create note with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property must exist and must not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'note id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have 'title'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have completed status 'false'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.completed).to.eql(false)\r",
									"});\r",
									"\r",
									"pm.test(\"Response header have content-type\", function(){\r",
									"    pm.response.to.have.header(\"content-type\")\r",
									"})\r",
									"\r",
									"// JSON parsing\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Check if it prints id or not from message on console\r",
									"console.log(responseData.data.id)\r",
									"\r",
									"// responmseData.data.id gets new id everytime and stores in collection variable named 'id'. \r",
									"// If id variable is already present in collection variable it will be update in current value section\r",
									"pm.environment.set('noteID', responseData.data.id)\r",
									"console.log(responseData.data.id)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{noteName}}\",\r\n    \"description\": \"{{noteDescription}}\",\r\n    \"category\": \"{{noteCategory}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/notes",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Create note with auth (POST) This is a positive scenerio where a user tries to create note with proper authentication.\n\nAuth data was stored on parent folder after token was generted on successfult login so we can just use it by selecting 'inherit auth from parent' on Auth section on every request rather than manually entering auth data again by selecting auth type to API key on every request.\n\nDynamic 'note id' is generated every time new notes are created so i wrote assertion to store dynamically generated 'note id' on environment variable name 'noteid' itself same like token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve all notes",
			"item": [
				{
					"name": "retrieve all notes without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'No authentication token specified in x-auth-token header'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"No authentication token specified in x-auth-token header\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response header have content-type\", function(){\r",
									"    pm.response.to.have.header(\"content-type\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Fetch all notes without auth (GET) This is a negative scenerio where a user tries to fetch all the notes that was created without authetication."
					},
					"response": []
				},
				{
					"name": "retrieve all notes with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property must exist and must not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'note id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have 'title'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response header have content-type\", function(){\r",
									"    pm.response.to.have.header(\"content-type\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Fetch all notes with auth (GET) This is a positive scenerio where a user tries to fetch all the notes that was created with proper authetication."
					},
					"response": []
				}
			]
		},
		{
			"name": "GET note by id",
			"item": [
				{
					"name": "retrieve note by id without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'No authentication token specified in x-auth-token header'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"No authentication token specified in x-auth-token header\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteID}}"
								}
							]
						},
						"description": "Fetch note by without auth (GET) This is a negative scenerio where a user tries to get note by id without authentication.\n\nHere i set 'note id' as Path Variables instead of passing it directly on URL."
					},
					"response": []
				},
				{
					"name": "retrieve note by invalid id witth auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response body have 'Note ID must be a valid ID'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Note ID must be a valid ID\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "$#"
								}
							]
						},
						"description": "Fetch note by with auth but incorrect id (GET) This is a negative scenerio where a user tries to get note by id by passing incorrect note id with proper authentication."
					},
					"response": []
				},
				{
					"name": "retrieve note by id with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property must exist and must not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'note id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have 'title'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteID}}"
								}
							]
						},
						"description": "Fetch note by with auth and correct note id (GET) This is a positive scenerio where a user tries to get note by id with proper authentication and with correct note id."
					},
					"response": []
				}
			]
		},
		{
			"name": "Update note by id",
			"item": [
				{
					"name": "update note by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property must exist and must not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have 'note id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data property have 'title'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{noteID}}\",\r\n    \"title\": \"{{noteName1}}\",\r\n    \"description\": \"{{noteDescription1}}\",\r\n    \"category\": \"Work\",\r\n    \"completed\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteID}}"
								}
							]
						},
						"description": "Update entire note by id (PUT) This is a positive scenerio where a user tries to replace the entire resource with the new data.\n\nHere i changed note title, description, category and completed status."
					},
					"response": []
				}
			]
		},
		{
			"name": "update complete status of note",
			"item": [
				{
					"name": "update complete status by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property is an object\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"Object\");\r",
									"})\r",
									"\r",
									"pm.test(\"Data property must exist and must not be empty\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.exist.and.not.to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Data property have completed status 'false'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.completed).to.eql(false)\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{noteID}}\",\r\n    \"completed\": false\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteID}}"
								}
							]
						},
						"description": "Update 'Complete' status of note by id (PATCH) This is a positive scenerio where a user tries to apply partial modifications to the resource with proper authenticatiion.\n\nHere i updated 'complete' status from false to true."
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete note by id",
			"item": [
				{
					"name": "delete note by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response message have 'Note successfully deleted'\", function () {\r",
									"    let responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.eql(\"Note successfully deleted\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiEndpoint}}/notes/:id",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteID}}"
								}
							]
						},
						"description": "Delete note by id (DEL) This is a positive scenerio where a user tries to delete the note with proper authentication."
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete account",
			"item": [
				{
					"name": "delete account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.expect(pm.response.code).to.be.eql(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"})\r",
									"\r",
									"pm.test('Response body is in JSON', function(){\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response message have 'Account successfully deleted'\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"Account successfully deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiEndpoint}}/users/delete-account",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"delete-account"
							]
						},
						"description": "Delete account (DEL) This is a positive scenerio where a user tries to delete the account permanently with proper authentication."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "{{tokenType}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}